class Solution {
    public void sortSecondCol(int arr[][]) 
    { 
        Arrays.sort(arr, new Comparator<int[]>() { 
          @Override              
          public int compare(final int[] entry1,  
                             final int[] entry2) { 
            if (entry1[1] > entry2[1]) 
                return 1; 
            else
                return -1; 
          } 
        });
    }
    public int eraseOverlapIntervals(int[][] intervals) {
        if (intervals.length <= 1)
            return 0;
        sortSecondCol(intervals);
        int ans = 0;
        int prev = intervals[0][1];
        for (int i = 1; i < intervals.length; ++i)
        {
            if (prev <= intervals[i][0])
                prev = intervals[i][1];
            else
                ans++;
        }
        return ans;
    }
}

/**
 * Notes: Greedy Algorithm to sort the intervals based
 * on their ending positions. If we choose the ones with 
 * earlier ending positions then we have more flexibilities
 * for the rest of the choices. 
 * So we sort based on the second column and keep track
 * of the previous ending point, if overlap then we discard
 * this interval and move on. Otherwise we update the ending
 * point. 
 */